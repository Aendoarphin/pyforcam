########################
REQUIREMENTS/TODOs T_T #
########################

MAIN TASK: Complete data fetch functinality; connect start button to slot

1. Calculate the total percentage of tool runtime from a source XML:

    a. Look for the <ToolLife> tag in the XML data.
    b. The <ToolLife> tag should have an attribute called "initial," 
       which stores the initial tool life value (runtime at the start).
    c. Extract the numerical content from the <ToolLife> tag, representing the tool's current life (runtime).
    d. Calculate the tool life percentage using the following formula:

        myFloatPercentage = (ToolLife:content / attr:initial) * 100
2. Include a Qt Widget that lets user set percentage reference. When
   the cell under "Life Remaining" column contains the reference value,
   make cell (QTableWidgetItem) background YELLOW

   ###################### FUNCTION ######################

    self.tableWidget.cellChanged.connect(self.on_cell_changed)

    def on_cell_changed(self, row, col):
    # Get the cell item that was changed
    item = self.tableWidget.item(row, col)
    if item is not None:
        # Get the new cell value
        new_value = item.text()

        # Check if the new value ends with "%"
        if new_value.endswith("%"):
            try:
                # Extract the numeric value from the cell (excluding the "%")
                numeric_value = float(new_value.rstrip("%"))

                # Assuming you want to highlight cells with values greater than or equal to 30%
                if numeric_value >= 30:
                    item.setBackground(QColor(0, 255, 0))  # Set the background color to green
                else:
                    item.setBackground(QColor(255, 255, 255))  # Set the background color to white
            except ValueError:
                # If the conversion to a numeric value fails, set the background color to white
                item.setBackground(QColor(255, 255, 255))
3. In the IP configuration settings window, add a Qt Widget to let user specify time interval
   for fetching the data (minutes: int)
4. Make settings json for storing session data
   
   a. Load the settings from main window via Ui_Dialog object
   b. Initialize Ui_Dialog in main window and assign object attributes
      with the loaded data


pyinstaller --onefile --add-data "resources/window-icon.jpg;resources" --add-data "resources/table-bg.png;resources" main_window.py